import Testing
@testable import SwiftGmp

@Test func largeTest() {
    let calculator = Calculator(precision: 20)

    calculator.monoFontDisplay.displayWidth = 10
    calculator.setPrecision(newPrecision: 100)
    
    calculator.evaluateString("1e9")
    #expect(calculator.string == "1000000000")
    
    calculator.evaluateString("1e10")
    #expect(calculator.string == "1.0e10")
    
    calculator.evaluateString("1e11")
    #expect(calculator.string == "1.0e11")
    
    calculator.evaluateString("1e15")
    #expect(calculator.string == "1.0e15")
    
    calculator.evaluateString("1e18")
    print(calculator.raw)
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 18)
    
    calculator.evaluateString("1e21")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 21)
    
    calculator.evaluateString("1e24")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 24)
    
    calculator.evaluateString("1e48")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 48)
    calculator.monoFontDisplay.displayWidth = 10
    
    calculator.evaluateString("1e9")
    #expect(calculator.string == "1000000000")
    
    calculator.evaluateString("1e10")
    #expect(calculator.string == "1.0e10")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 10)
    
    calculator.evaluateString("1e11")
    #expect(calculator.string == "1.0e11")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 11)
    
    calculator.evaluateString("1e12")
    #expect(calculator.string == "1.0e12")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 12)
    
    calculator.evaluateString("1e15")
    #expect(calculator.string == "1.0e15")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 15)
    
    calculator.evaluateString("1e18")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 18)
    
    calculator.evaluateString("1e21")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 21)
    
    calculator.evaluateString("1e24")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 24)
    
    calculator.evaluateString("1e48")
    #expect(calculator.raw.mantissa == "1")
    #expect(calculator.raw.exponent == 48)

    calculator.evaluateString("1e-20")
    #expect(calculator.string == "1.0e-20")


    calculator.monoFontDisplay.displayWidth = 100
    calculator.evaluateString("1e48 + 1")
    #expect(calculator.raw.mantissa == "1000000000000000000000000000000000000000000000001")
    #expect(calculator.raw.exponent == 48)
    
    calculator.evaluateString("1e48+1-1e48")
    #expect(calculator.string == "1")
    
    calculator.evaluateString("1e68+2-1e68")
    #expect(calculator.string == "2")
    
    calculator.evaluateString("1e88+3-1e88")
    #expect(calculator.string == "3")
    
    calculator.monoFontDisplay.displayWidth = 10
    calculator.evaluateString("55555.1234567890")
    #expect(calculator.string == "55555.1234")
    
    calculator.evaluateString("555555.1234567890")
    #expect(calculator.string == "555555.123")
    
    calculator.evaluateString("5555555.1234567890")
    #expect(calculator.string == "5555555.12")
    
    calculator.evaluateString("55555555.1234567890")
    #expect(calculator.string == "55555555.1")
    
    calculator.evaluateString("555555555.1234567890")
    #expect(calculator.string == "5.555555e8")
    #expect(calculator.raw.mantissa.starts(with: "5555555551"))
    #expect(calculator.raw.exponent == 8)
    
    calculator.evaluateString("5555555555.1234567890")
    #expect(calculator.string == "5.555555e9")
    calculator.evaluateString("55555555555.1234567890")
    #expect(calculator.string == "5.55555e10")
    calculator.evaluateString("555555555555.1234567890")
    #expect(calculator.string == "5.55555e11")
    calculator.evaluateString("5555555555555.1234567890")
    #expect(calculator.string == "5.55555e12")
    calculator.evaluateString("55555555555555.1234567890")
    #expect(calculator.string == "5.55555e13")
    calculator.monoFontDisplay.displayWidth = 10
    calculator.setPrecision(newPrecision: 1000)
    calculator.evaluateString("pi")
    #expect(calculator.string == "3.14159265")
    calculator.monoFontDisplay.displayWidth = 1000
    #expect(calculator.raw.mantissa == "3141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198")
    #expect(calculator.raw.exponent == 0)
    calculator.setPrecision(newPrecision: 4159)
    calculator.evaluateString("sqrt(pi)")
    calculator.monoFontDisplay.displayWidth = 10
    #expect(calculator.string == "1.77245385")
    calculator.monoFontDisplay.displayWidth = 4159
    #expect(calculator.raw.mantissa == "1772453850905516027298167483341145182797549456122387128213807789852911284591032181374950656738544665416226823624282570666236152865724422602525093709602787068462037698653105122849925173028950826228932095379267962800174639015351479720516700190185234018585446974494912640313921775525906216405419332500906398407613733477475153433667989789365851836408795451165161738760059067393431791332809854846248184902054654852195613251561647467515042738761056107996127107210060372044483672365296613708094323498831668424213845709609120420427785778068694766570005218305685125413396636944654181510716693883321942929357062268865224420542149948049920756486398874838505930640218214029285811233064978945203621149078962287389403245978198513134871266512506293260044656382109675026812496930595420461560761952217391525070207792758099054332900662223067614469661248188743069978835205061464443854185307973574257179185635959749959952263849242203889103966406447293972841345043002140564233433039261756134176336320017037654163476320669276541812835762490326904508485320134192435989730871193799482938730111262561658818884785977875963761363218634246546641333954355703201522654193952186030497310513829498439659165614245955421226615102478536098095510395600789402188099613382854025016800745802729119366425192820510001936350073914643295493433951928853735459200563766502880540575532123189009126322819150914980836695624483100852221923973646324842863261145766932425371577377894414090544573595351225626391080239236909732127905807617134603914574791879794124850218445145811341888880413220955332184646709727491028565262707845453262227848800982385836300754950954764062377083388357225436621567481327668384244972420874516161833205077991480184666814236693651902845463857614827857037774388376297479982737705431583682410998683228503805526355369722293133805264428410372312043967004307612454138311792278275363715598398376884537027842985707090511223840536779013385414585316208073043138069739987436693166013817079272056041954882858063093111636297047867814026963272962701226135985897754505289483113016684001532074851982402463337555851713568019341228975980719568740250571502141783792543643030365928211250925880618903117074543127903953553660682611001188965742048727593919976995538352115086696255596441370503829244953590310636234530564717116216858725458687440029611757921723190554057198681727588419089649657906696515601728351482903856551169807210795330916130843598524389465440682165500327537996023866503798886481521186579995857186563775113315974753596043413776645119143460134292508116324806409073773212629335747472967679341271602966512080989809057799660305102181625557978907487076211076238026267854297015027109153504985351492390832484280828987595575678848892608420885521269510357370208661259115541320440373560864338837123962064293902378666311632616788841922798194995240394245784220443030420430420710969273392946085104969289739161855607837870336428902342932718872968029721581659426129728366395905041130374745743509749058016326916537576909810974856253778503428799421922377185844318327937312980065870368619230102174545052030845533038619506602364334115320597412242642653542165581500364726919463825441245572594739007192271870979605498972460282260242910507740208123756748076276377437063450463147737694803316835707620587495781733509967628733873967029688190661426144573713228228039354446083776010586467389438557768872039717670592731663009031126081448843086241142922479654540261637551586587351984372175505527295064150435768758381493594010556591215037704419738803705680971434631636054341365076699975762119811842587422520814043640621172309197439455245967781742191464333506714636462259479231949700349660256352103378066038052703165245454647364062083029827349433672847735302022470529009956981567058640398856368349564952882878519644755574256014599268525818563085380581552199702923480294821795700392954768767378746756147454505258517116754152028266227999770386933422500122977316212394924627075833168064640739293784578214185498332786764818792567950132845112600154788298303970941227955902739831214814542270184266024781981043333772958400258388865676834533309029610949987493741347827363468214661024873730434936857350647979436639913666636603319")
    #expect(calculator.raw.exponent == 0)
}
