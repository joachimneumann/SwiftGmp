// Note: This file is automatically generated.
//       It will be overwritten sooner or later.

import Testing
import SwiftGmp

@Test func basics1TestR() {
    let calculator = Calculator(precision: 20)
    var R = Representation()
    var RString: String
    let font = AppleFont.monospacedSystemFont(ofSize: 40, weight: .regular)

    calculator.evaluateString("1.1 * 1")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.1))

    calculator.evaluateString("1 + 3 * 10")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 31))

    calculator.evaluateString("1 + 2")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 3))

    calculator.evaluateString("2 * 4")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 8))

    calculator.evaluateString("10/2")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 5))

    calculator.evaluateString("abs(-5.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 5))

    calculator.evaluateString("abs(3.14)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 3.14))

    calculator.evaluateString("abs(0.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("500 + 500")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1000))

    calculator.evaluateString("abs(-100.25)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 100.25))

    calculator.evaluateString("abs(12.5)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 12.5))

    calculator.evaluateString("153.4 - 153")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.4))

    calculator.evaluateString("153.4 - 152")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.4))

    calculator.evaluateString("153.4 - 142")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 11.4))

    calculator.evaluateString("153.4 - 154")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -0.6))

    calculator.evaluateString("153.4 - 155")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -1.6))

    calculator.evaluateString("153.4 - 165")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -11.6))

    calculator.evaluateString("1 / 7")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.1428571))

    calculator.evaluateString("10 %")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.1))

    calculator.evaluateString("200 + 20 %")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 240))

    calculator.evaluateString("100 + e %")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 102.7183))

    calculator.evaluateString("0.1 %")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.001))

    calculator.evaluateString("pi")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 3.14159))

    calculator.evaluateString("sqrt(4.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 2))

    calculator.evaluateString("sqrt(9.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 3))

    calculator.evaluateString("sqrt(0.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("sqrt(16.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 4))

    calculator.evaluateString("sqrt(25.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 5))

    calculator.evaluateString("sqrt3(8.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 2))

    calculator.evaluateString("sqrt3(27.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 3))

    calculator.evaluateString("sqrt3(0.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("sqrt3(64.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 4))

    calculator.evaluateString("sqrt3(125.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 5))

    calculator.evaluateString("zeta(2)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.6449340668482264))

    calculator.evaluateString("zeta(3)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.2020569031595942))

    calculator.evaluateString("zeta(4)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.0823232337111381))

    calculator.evaluateString("zeta(5)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.0369277551433699))

    calculator.evaluateString("zeta(6)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.0173430619844490))

    calculator.evaluateString("zeta(7)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.0083492773819228))

    calculator.evaluateString("zeta(8)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.0040773561979440))

    calculator.evaluateString("zeta(9)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.0020083928260822))

    calculator.evaluateString("ln(1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("ln(2.7183)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.0))

    calculator.evaluateString("ln(7.3891)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 2.0))

    calculator.evaluateString("ln(20.0855)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 3.0))

    calculator.evaluateString("ln(54.5982)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 4.0))

    calculator.evaluateString("log10(1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("log10(10.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1))

    calculator.evaluateString("log10(100.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 2))

    calculator.evaluateString("log10(1000.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 3))

    calculator.evaluateString("log10(10000.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 4))

    calculator.evaluateString("log2(1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("log2(2.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1))

    calculator.evaluateString("log2(4.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 2))

    calculator.evaluateString("log2(8.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 3))

    calculator.evaluateString("log2(16.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 4))

    calculator.evaluateString("sqr(2.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 4))

    calculator.evaluateString("sqr(3.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 9))

    calculator.evaluateString("sqr(5.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 25))

    calculator.evaluateString("sqr(-4.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 16))

    calculator.evaluateString("sqr(10.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 100))

    calculator.evaluateString("exp(1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 2.7183))

    calculator.evaluateString("exp(2.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 7.3891))

    calculator.evaluateString("exp(3.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 20.0855))

    calculator.evaluateString("exp(0.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1))

    calculator.evaluateString("exp(-1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.3679))

    calculator.evaluateString("exp10(0.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1))

    calculator.evaluateString("exp10(1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 10))

    calculator.evaluateString("exp10(2.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 100))

    calculator.evaluateString("exp10(3.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1000))

    calculator.evaluateString("exp10(-1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.1))

    calculator.evaluateString("0.0 ±")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("0.0 ±")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("5.0 ±")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -5))

    calculator.evaluateString("-3.14 ±")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 3.14))

    calculator.evaluateString("0.0 ±")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("100.0 ±")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -100))

    calculator.evaluateString("-50.0 ±")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 50))

    calculator.evaluateString("cubed(2.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 8))

    calculator.evaluateString("cubed(3.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 27))

    calculator.evaluateString("cubed(-4.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -64))

    calculator.evaluateString("cubed(5.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 125))

    calculator.evaluateString("cubed(-2.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -8))

    calculator.evaluateString("rez(2.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5))

    calculator.evaluateString("rez(4.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.25))

    calculator.evaluateString("rez(0.5)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 2))

    calculator.evaluateString("rez(10.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.1))

    calculator.evaluateString("rez(0.2)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 5))

    calculator.evaluateString("fac(0.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1))

    calculator.evaluateString("fac(1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1))

    calculator.evaluateString("fac(2.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 2))

    calculator.evaluateString("sind(30)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5))

    calculator.evaluateString("sind(45)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.7071))

    calculator.evaluateString("sind(60)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.8660))

    calculator.evaluateString("sind(90)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1))

    calculator.evaluateString("sind(0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("sind(180)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("sind(270)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -1))

    calculator.evaluateString("cosd(30)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.8660))

    calculator.evaluateString("cosd(45)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.7071))

    calculator.evaluateString("cosd(60)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5))

    calculator.evaluateString("cosd(90)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("tand(45)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1))

    calculator.evaluateString("tand(60)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.7321))

    calculator.evaluateString("tand(30)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5774))

    calculator.evaluateString("tand(0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("asind(0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("acosd(0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 90))

    calculator.evaluateString("asind(0.5)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 30))

    calculator.evaluateString("acosd(0.5)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 60))

    calculator.evaluateString("atand(1)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 45))

    calculator.evaluateString("atand(0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("sin(1.5708)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1))

    calculator.evaluateString("cos(0.5236)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.8660))

    calculator.evaluateString("sin(1.0472)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.8660))

    calculator.evaluateString("tan(0.7854)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1))

    calculator.evaluateString("sin(2.3562)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.7071))

    calculator.evaluateString("cos(2.6180)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -0.8660))

    calculator.evaluateString("sin(3.1416)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("cos(3.1416)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -1))

    calculator.evaluateString("sin(3.6652)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -0.5))

    calculator.evaluateString("cos(3.92699)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -0.7071))

    calculator.evaluateString("sin(5.7596)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -0.5))

    calculator.evaluateString("sin(6.2832)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("cos(4.7124)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("atan(0.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("atan(1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.7854))

    calculator.evaluateString("acos(0.8660)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5236))

    calculator.evaluateString("asin(0.5)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5236))

    calculator.evaluateString("atan(-1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -0.7854))

    calculator.evaluateString("asin(0.8660)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.0472))

    calculator.evaluateString("acos(1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("sin(0.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0))

    calculator.evaluateString("sin(0.7854)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.7071))

    calculator.evaluateString("cos(1.5708)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.0))

    calculator.evaluateString("tan(1.0472)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.7321))

    calculator.evaluateString("sin(0.5236)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5))

    calculator.evaluateString("tan(0.5236)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5774))

    calculator.evaluateString("cos(1.0472)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5))

    calculator.evaluateString("sin(2.0944)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.8660))

    calculator.evaluateString("tan(3.1416)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.0))

    calculator.evaluateString("sin(2.6180)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5))

    calculator.evaluateString("cos(5.23599)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5))

    calculator.evaluateString("cos(2.0944)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: -0.5))

    calculator.evaluateString("cos(5.7596)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.8660))

    calculator.evaluateString("asin(1.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.5708))

    calculator.evaluateString("acos(0.0)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 1.5708))

    calculator.evaluateString("acos(0.7071)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.7854))

    calculator.evaluateString("atan(0.5774)")
    R = Representation(mantissaExponent: calculator.mantissaExponent!, proportionalFont: font, monoSpacedFont: font, decimalSeparator: DecimalSeparator.dot, separateGroups: true, ePadding: 0.0, width: 300)
    RString = R.debugDescription
    RString = RString.replacingOccurrences(of: DecimalSeparator.comma.rawValue, with: "")
    #expect(Double(RString)!.similar(to: 0.5236))

}
