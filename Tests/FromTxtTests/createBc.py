#!/usr/bin/env python3
import glob, os

precision = 100

def write(content):
    f.write(content)
def writeln(content):
    write(content)
    write("\n")

def assertEqual(components):
    if not (components[-2] == "=" or components[-2] == "~=" or components[-2] == "!="):
        print("second last not \"=\", \"~=\", \"!=\"")
        print(components)
        return

    write("    leftNumber = ")
    for component in components[:-2]:
        if is_double(component):
            if len(component) <= 16:
                write("Number(" + component + ", precision: precision)")
            else:
                write("Number(\"" + component + "\", precision: precision)")
        else:
            operator = component
            if operator == "+" or operator == "-" or operator == "*" or operator == "/":
                write(" "+component+" ")
            else:
                writeln("")
                write("    leftNumber.inplace_"+operator+"()")
    writeln("")
    if components[-1] == "infinity":
        writeln("    #expect(leftNumber.isInfinity)")
    else:
        if components[-2] == "=":
            writeln("    #expect(leftNumber.representation().allInOneLine == \"" + components[-1] + "\")")
        elif components[-2] == "!=":
            writeln("    #expect(leftNumber.representation().allInOneLine != \"" + components[-1] + "\")")
        elif components[-2] == "~=":
            writeln("    #expect(leftNumber.toDouble().similarTo(" + components[-1] + "))")

# Get full file name with directores using for loop
for file in glob.glob("*.bc"):
    basename = os.path.basename(file).replace(".bc", "")

    print(basename+"BcTest.swift")
    f = open(basename+"BcTest.swift", 'w')
    writeln("// Note: This file is automatically generated.")
    writeln("//       It will be overwritten sooner or later.")
    writeln("")
    writeln("import Testing")
    writeln("@testable import SwiftGmp")
    writeln("")
    writeln("@Test func "+basename+"BcTest() {")
    writeln("    let calculator = Calculator(precision: "+str(precision)+")")
    writeln("")
    tempDeclared = False
    with open(file) as file:
        for line in file:
            line = line.strip()
            if len(line) > 0:
                contentAndComment = line.split("//")
                content = contentAndComment[0].strip()
                comment = " ".join(contentAndComment[1:]).strip()

                if len(content) == 0:
                    if len(comment) > 0:
                        writeln("// "+comment)
                else:
                    if "=" in content:
                        components = content.strip().split("~=")
                        if len(components) == 2:
                            if not tempDeclared:
                                tempDeclared = True
                                writeln("    var swiftGmp, bc: SwiftGmp")
                                writeln("")
                            if components[1].strip() == "error":
                                writeln("    // "+components[0].strip()+" --> bc = error")
                            else:
                                writeln("    swiftGmp = calculator.asSwiftGmp(\""+components[0].strip()+"\")")
                                writeln("    bc = calculator.asSwiftGmp(\""+components[1].strip()+"\")")
                                writeln("    #expect(swiftGmp.similar(to: bc, precision: 1e-"+str(precision-4)+"))")
#                    else:
#                        if components[0].strip() == "precision":
#                            writeln("    calculator.setPrecision(newPrecision: "+components[1].strip()+")")
#                        elif components[0].strip() == "maxOutputLength":
    writeln("}")
    f.close()
