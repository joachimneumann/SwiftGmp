// Note: This file is automatically generated.
//       It will be overwritten sooner or later.

import Testing
import SwiftGmp

@Test func basics2Test() async {
    let calculator = Calculator(precision: 20)
    var temp: Double = 0.0

    #expect((await calculator.asString("1500 + 2000")) == "3500")
    #expect((await calculator.asString("1 + 2")) == "3")
    #expect((await calculator.asString("-1 + 1.0000")) == "0")
    #expect((await calculator.asString("10.1 + 2")) == "12.1")
    #expect((await calculator.asString("10 + 9.9999")) == "19.9999")
    #expect((await calculator.asString("34.999 + 1.0")) == "35.999")
    #expect((await calculator.asString("-5 + 0")) == "-5")
    #expect((await calculator.asString("0 + 5")) == "5")
    #expect((await calculator.asString("-5 + 5")) == "0")
    #expect((await calculator.asString("300000000 + 900000000")) == "1200000000")
    #expect((await calculator.asString("900000000 + 900000000")) == "1800000000")
    #expect((await calculator.asString("999999999 + 1")) == "1000000000")
    #expect((await calculator.asString("-1987.50 + 1987")) == "-0.5")
    #expect((await calculator.asString("6 * 2 + 8")) == "20")
    #expect((await calculator.asString("1500 - 2000 + 0.25")) == "-499.75")
    #expect((await calculator.asString("1500 - 2000 + 1.23456789")) == "-498.76543211")
    #expect((await calculator.asString("1500 - 2000 + 123456789")) == "123456289")
    #expect((await calculator.asString("1500 - 2000")) == "-500")
    #expect((await calculator.asString("9 - 3")) == "6")
    #expect((await calculator.asString("-3 - 0")) == "-3")
    #expect((await calculator.asString("3 - 0")) == "3")
    #expect((await calculator.asString("-1 - 2.25")) == "-3.25")
    #expect((await calculator.asString("9.35 - 1")) == "8.35")
    #expect((await calculator.asString("9 - 1.35")) == "7.65")
    #expect((await calculator.asString("0.29 - 1.35")) == "-1.06")
    #expect((await calculator.asString("7.1234567 - 2.2109876")) == "4.9124691")
    #expect((await calculator.asString("1000 + - 10.99")) == "989.01")
    #expect((await calculator.asString("50 + - 60")) == "-10")
    #expect((await calculator.asString("-5 + - 20")) == "-25")
    #expect((await calculator.asString("-1.33 - 2")) == "-3.33")
    #expect((await calculator.asString("123456789 - 210987654")) == "-87530865")
    #expect((await calculator.asString("7.12345678 - 2.21098765")) == "4.91246913")
    #expect((await calculator.asString("1500 * 2000")) == "3000000")
    #expect((await calculator.asString("6 * 2")) == "12")
    #expect((await calculator.asString("1.212 * 8")) == "9.696")
    #expect((await calculator.asString("3 * 1.212")) == "3.636")
    #expect((await calculator.asString("0.133 * 1.212")) == "0.161196")
    #expect((await calculator.asString("1500 * 0")) == "0")
    #expect((await calculator.asString("-1500 * 2000")) == "-3000000")
    #expect((await calculator.asString("-1.212 * 8")) == "-9.696")
    #expect((await calculator.asString("-8 * 1.212")) == "-9.696")
    temp = await calculator.asDouble("1.23456789 * 2.10987654")
    #expect(temp.similarTo(2.60478583))
    temp = await calculator.asDouble("123456789 * 210987654")
    #expect(temp.similarTo(2.60478583e+16))
    #expect((await calculator.asString("0 * 6 * 6")) == "0")
    #expect((await calculator.asString("1500 / 2000")) == "0.75")
    #expect((await calculator.asString("6 / 2")) == "3")
    #expect((await calculator.asString("0 / 2000")) == "0")
    #expect((await calculator.asString("-1500 / 2000")) == "-0.75")
    #expect((await calculator.asString("-3.123 / 5")) == "-0.6246")
    temp = await calculator.asDouble("-5 / 3.123")
    #expect(temp.similarTo(-1.60102466))
    temp = await calculator.asDouble("4.21 / 3")
    #expect(temp.similarTo(1.40333333))
    temp = await calculator.asDouble("10 / 3.123")
    #expect(temp.similarTo(3.20204931))
    temp = await calculator.asDouble("0.234 / 3.123")
    #expect(temp.similarTo(0.0749279539))
    temp = await calculator.asDouble("(1500 - 2000) / 3.12")
    #expect(temp.similarTo(-160.25641))
    temp = await calculator.asDouble("(1500 - 2000) / 312")
    #expect(temp.similarTo(-1.6025641))
    #expect((await calculator.asString("(6 * 2) / 8")) == "1.5")
    #expect((await calculator.asString("1500 / 0")) == "inf")
    #expect((await calculator.asString("6 / 0")) == "inf")
    #expect((await calculator.asString("-6 / 0")) == "-inf")
    temp = await calculator.asDouble("1.23456789 / 2.10987654")
    #expect(temp.similarTo(0.585137503))
    temp = await calculator.asDouble("(1500 - 2000) / 1234.56789")
    #expect(temp.similarTo(-0.405000004))
    temp = await calculator.asDouble("(1500 - 2000) / 123456789")
    #expect(temp.similarTo(-0.00000405000004))
// -12.3 C = 0
// 12.3 C = 0
// -123 C = 0
// 123 C = 0
// 123456789 C C C = 0
// 1234.56789 C = 0
// -1234.56789 C = 0
// -123456789 C = 0
// 123456789 C = 0
    #expect((await calculator.asString(".11111")) == "0.11111")
    #expect((await calculator.asString("0000")) == "0")
    #expect((await calculator.asString("000.11111")) == "0.11111")
    #expect((await calculator.asString("06")) == "6")
    #expect((await calculator.asString("6 * 06")) == "36")
    #expect((await calculator.asString("1111.11111")) == "1111.11111")
    #expect((await calculator.asString("123.567")) == "123.567")
    #expect((await calculator.asString("0.6")) == "0.6")
    #expect((await calculator.asString(".6")) == "0.6")
    #expect((await calculator.asString("6 * 0.6")) == "3.6")
    #expect((await calculator.asString("6 * .6")) == "3.6")
    #expect((await calculator.asString("1.1")) == "1.1")
    #expect((await calculator.asString("12.3456789")) == "12.3456789")
    #expect((await calculator.asString("0123456789")) == "123456789")
}
